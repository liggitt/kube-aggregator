// This file was automatically generated by lister-gen with arguments: --go-header-file=/home/deads/workspaces/o-kube-aggregator/src/github.com/openshift/kube-aggregator/hack/boilerplate.txt --input-dirs=[github.com/openshift/kube-aggregator/pkg/api] --output-package=github.com/openshift/kube-aggregator/pkg/client/listers

package internalversion

import (
	api "github.com/openshift/kube-aggregator/pkg/api"
	pkg_api "k8s.io/kubernetes/pkg/api"
	"k8s.io/kubernetes/pkg/api/errors"
	"k8s.io/kubernetes/pkg/client/cache"
	"k8s.io/kubernetes/pkg/labels"
)

// APIServerLister helps list APIServers.
type APIServerLister interface {
	// List lists all APIServers in the indexer.
	List(selector labels.Selector) (ret []*api.APIServer, err error)
	// Get retrieves the APIServer from the index for a given name.
	Get(name string) (*api.APIServer, error)
	APIServerListerExpansion
}

// aPIServerLister implements the APIServerLister interface.
type aPIServerLister struct {
	indexer cache.Indexer
}

// NewAPIServerLister returns a new APIServerLister.
func NewAPIServerLister(indexer cache.Indexer) APIServerLister {
	return &aPIServerLister{indexer: indexer}
}

// List lists all APIServers in the indexer.
func (s *aPIServerLister) List(selector labels.Selector) (ret []*api.APIServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*api.APIServer))
	})
	return ret, err
}

// Get retrieves the APIServer from the index for a given name.
func (s *aPIServerLister) Get(name string) (*api.APIServer, error) {
	key := &api.APIServer{ObjectMeta: pkg_api.ObjectMeta{Name: name}}
	obj, exists, err := s.indexer.Get(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(api.Resource("apiserver"), name)
	}
	return obj.(*api.APIServer), nil
}
